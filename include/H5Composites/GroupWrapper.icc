#include "H5Composites/BufferReadTraits.h"
#include "H5Composites/BufferWriteTraits.h"
#include "H5Composites/DTypeConverter.h"

namespace H5Composites {
    template <typename T>
    UnderlyingType_t<T> GroupWrapper::readScalar(const std::string &name) const {
        H5::DataSet ds = m_group.openDataSet(name);
        H5Buffer buffer(ds.getDataType());
        return ds.read(buffer.get(), buffer.dtype());
    }

    template <typename T>
    H5::DataSet GroupWrapper::writeScalar(const UnderlyingType_t<T> &obj, const std::string &name) {
        return writeScalar<T>(obj, name, TypeIDTraits<T>::typeID());
    }

    template <typename T>
    H5::DataSet GroupWrapper::writeScalar(
            const UnderlyingType_t<T> &obj, const std::string &name, const std::string &typeName) {
        const H5::EnumType &enumType = TypeRegister::instance().enumType();
        H5Buffer buffer(enumType);
        enumType.valueOf(typeName, buffer.get());
        return writeScalar<T>(obj, name, buffer);
    }

    template <typename T>
    H5::DataSet GroupWrapper::writeScalar(
            const UnderlyingType_t<T> &obj, const std::string &name, TypeRegister::id_t typeID) {
        return writeScalar<T>(
                obj, name, (typeID == TypeRegister::nullID) ? H5Buffer() : toBuffer(typeID));
    }

    template <typename T>
    H5::DataSet GroupWrapper::writeScalar(
            const UnderlyingType_t<T> &obj, const std::string &name, const H5Buffer &fileTypeID) {
        H5::DataSet ds = m_group.createDataSet(name, getH5DType<T>(obj), H5S_SCALAR);
        H5Buffer buffer = toBuffer<T>(obj);
        ds.write(buffer.get(), buffer.dtype());
        if (fileTypeID) {
            H5::Attribute attr = ds.createAttribute("typeID", m_registerType, H5S_SCALAR);
            attr.write(fileTypeID.dtype(), fileTypeID.get());
        }
        return ds;
    }

    template <typename T>
    TypedWriter<T> GroupWrapper::makeDataSetWriter(
            const std::string &name, std::size_t cacheSize, std::size_t chunkSize) {
        return TypedWriter<T>(m_group, name, cacheSize, chunkSize);
    }

    template <typename T, typename... Args>
    std::enable_if_t<std::is_constructible_v<UnderlyingType_t<T>, Args...>, ScalarWriter<T>>
    GroupWrapper::makeScalarWriter(const std::string &name, Args &&...args) {
        return makeScalarWriter<T>(*this, name, std::forward<Args &&>(args)...);
    }

    template <typename T>
    ScalarWriter<T>::ScalarWriter(
            GroupWrapper &group, const std::string &name, const UnderlyingType_t<T> &value)
            : m_targetGroup(group), m_name(name), m_value(value) {}

    template <typename T>
    ScalarWriter<T>::ScalarWriter(
            GroupWrapper &group, const std::string &name, UnderlyingType_t<T> &&value)
            : m_targetGroup(group), m_name(name), m_value(std::move(value)) {}

    template <typename T> ScalarWriter<T>::~ScalarWriter() {
        m_targetGroup.writeScalar<T>(m_value, m_name);
    }

    template <typename T, typename... Args>
    std::enable_if_t<std::is_constructible_v<UnderlyingType_t<T>, Args...>, ScalarWriter<T>>
    makeScalarHandle(GroupWrapper &group, const std::string &name, Args &&...args) {
        return ScalarWriter<T>(group, name, UnderlyingType_t<T>(std::forward<Args &&>(args)...));
    }
} // namespace H5Composites
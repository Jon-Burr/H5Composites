#include "H5Composites/CompDTypeUtils.h"

namespace H5Composites {
    template <typename Base> GenericFactory<Base> &GenericFactory<Base>::instance() {
        static GenericFactory factory;
        return factory;
    }

    template <typename Base>
    template <typename T>
    std::enable_if_t<std::is_base_of_v<Base, T>, bool> GenericFactory<Base>::registerFactory() {
        return m_factories
                .emplace(
                        TypeIDTraits<T>::typeID(),
                        [](const void *buffer, const H5::DataType &dtype) {
                            return std::make_unique<T>(buffer, dtype);
                        })
                .second;
    }

    template <typename Base>
    typename GenericFactory<Base>::factory_t GenericFactory<Base>::retrieve(
            TypeRegister::id_t id) const {
        return m_factories.at(id);
    }

    template <typename Base> bool GenericFactory<Base>::contains(TypeRegister::id_t id) const {
        return m_factories.count(id);
    }

    template <typename Base>
    std::unique_ptr<Base> GenericFactory<Base>::create(
            TypeRegister::id_t id, const void *buffer, const H5::DataType &dtype) const {
        return retrieve(id)(buffer, dtype);
    }

    template <typename Base>
    std::unique_ptr<Base> GenericFactory<Base>::create(
            TypeRegister::id_t id, const H5Buffer &buffer) const {
        return create(id, buffer.get(), buffer.dtype());
    }

    template <typename Base>
    H5::DataType H5DType<GenericFactoryUPtr<Base>>::getType(const std::unique_ptr<Base> &value) {
        std::vector<std::pair<H5::DataType, std::string>> components;
        components.reserve(2);
        components.emplace_back(getH5DType<TypeRegister::id_t>(), "typeID");
        components.emplace_back(value->h5DType(), "data");
        return createCompoundDType(components);
    }

    template <typename Base>
    std::unique_ptr<Base> BufferReadTraits<GenericFactoryUPtr<Base>>::read(
            const void *buffer, const H5::DataType &dtype) {
        H5::CompType compDType(dtype.getId());
        TypeRegister::id_t typeID =
                readCompositeElement<TypeRegister::id_t>(buffer, compDType, "typeID");
        return GenericFactory<Base>::instance().create(
                typeID, getMemberPointer(buffer, compDType, "data"),
                compDType.getMemberDataType(compDType.getMemberIndex("data")));
    }

    template <typename Base>
    void BufferWriteTraits<GenericFactoryUPtr<Base>>::write(
            const std::unique_ptr<Base> &value, void *buffer, const H5::DataType &dtype) {
        H5::CompType compDType(dtype.getId());
        writeCompositeElement<TypeRegister::id_t>(value->getTypeID(), buffer, compDType, "typeID");
        value->writeBufferWithType(
                getMemberPointer(buffer, compDType, "data"),
                compDType.getMemberDataType(compDType.getMemberIndex("data")));
    }
} // namespace H5Composites
#include <stdexcept>
#include "H5Composites/DTypePrinter.h"

#define H5COMPOSITES_DETAIL_DISPATCH_ELEM(H5DTYPE, CTYPE)           \
    if (H5::PredType::H5DTYPE == dtype)                             \
    {                                                               \
        if constexpr (functor_result<F<CTYPE>, Args...>::is_valid)  \
            return F<CTYPE>()(std::forward<Args&&>(args)...);       \
        else                                                        \
            throw std::invalid_argument(                            \
                "Functor cannot act on "                            \
                + to_string(H5::PredType::H5DTYPE)                  \
            );                                                      \
    }
namespace H5Composites {


    template <template <typename> class F, typename... Args>
    apply_result_t<F, Args...> apply(const H5::PredType& dtype, Args&&... args)
    {
        H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_INT, int)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_UINT, unsigned int)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_CHAR, char)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_SCHAR, signed char)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_UCHAR, unsigned char)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_SHORT, short)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_USHORT, unsigned short)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_LONG, long)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_LLONG, long long)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_ULONG, unsigned long)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_ULLONG, unsigned long long)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_FLOAT, float)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_DOUBLE, double)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_HBOOL, bool)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_B8, std::bitset<8>)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_B16, std::bitset<16>)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_B32, std::bitset<32>)
        else H5COMPOSITES_DETAIL_DISPATCH_ELEM(NATIVE_B64, std::bitset<64>)
        else
            throw H5::DataTypeIException("Invalid data type provided to apply!");
    }
}
#undef H5COMPOSITES_DETAIL_DISPATCH_ELEM